



ohai                                                            T. Reddy
Internet-Draft                                                    Akamai
Intended status: Standards Track                                 D. Wing
Expires: 30 October 2022                                          Citrix
                                                            M. Boucadair
                                                                  Orange
                                                           28 April 2022


                        Oblivious Proxy Feedback
                draft-rdb-ohai-feedback-to-proxy-02

Abstract

   This specification enables a server to convey rate limit information
   to an oblivious proxy, which can thus use them to apply rate limit
   policies on oblivious clients.  Cooperating oblivious proxies can
   thus provide more equitable service to their distinguishable clients
   without impacting on the other proxied clients.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 30 October 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
     1.1.  Terminology
   2.  Providing RateLimit information to an Oblivious proxy
   3.  The ohai-target Quota Policy Parameter
     3.1.  Processing ohai-target
   4.  The attack-severity Quota Policy Parameter
   5.  Security Considerations
     5.1.  Client-Proxy collusion
     5.2.  Attack categories
     5.3.  Information disclosure
   6.  IANA Considerations
     6.1.  RateLimit Parameter Value Registrations
   7.  Normative References
   Appendix A.  Examples
     A.1.  Use of ohai-target and attack-severity
   Appendix B.  Acknowledgements
   Authors' Addresses

1.  Introduction

   Servers use service management techniques like rate limiting (see
   Section 1 of [RATELIMIT]) to protect their platforms and provide
   equitable service to clients.

   Privacy features provided by Oblivious HTTP [OHTTP] reduce the set of
   information available to origin servers, that cannot rely for example
   on the source IP address of the client to implement service limit
   policies: this can be problematic (see Section 8.2.1 of [OHTTP]) as
   origin servers might thus end to throttle out all the clients behind
   a proxy.

   This document defines a mechanism that allows Oblivious request and
   target resource to provide service limit information to an Oblivious
   proxy via the RateLimit fields defined in [RATELIMIT].  The Oblivious
   proxy can then use this information to apply service limit policies
   on oblivious clients.  This is useful when such servers identify
   traffic anomalies or unexpected request volumes.

   Specifically, the described mechanism enables a way to identify
   whenever the RateLimit fields are intended for the Oblivious client
   or for the Oblivious proxy.

   How an Oblivious proxy can use this information to avoid being
   throttled out or shape the request policy is outside the scope of
   this specification.

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The terms "Encapsulated request", "Encapsulated response", "Oblivious
   proxy resource", "Oblivious request resource", "Oblivious target
   resource" are to be interpreted as described in [OHTTP].

   The collective term "Oblivious resource" indicates either an
   "Oblivious request resource" or an "Oblivious target resource".

   The terms "content", "receiver", "request" and "response" are to be
   interpreted as described in [HTTP].

   The terms "quota policy", "service limit", "expiring limit" and
   "RateLimit fields" are to be interpreted as described in [RATELIMIT].

   This document uses the Integer type from [STRUCTURED-FIELDS].

   This document makes use of terms from [RFC8941].

2.  Providing RateLimit information to an Oblivious proxy

   An Oblivious resource that uses RateLimit fields to return service
   limit information MAY add the "ohai-target" quota policy parameter
   defined in Section 3 to signal to the receiver that the associated
   quota policy is intended for an Oblivious proxy.

   The term "Oblivious Proxy Feedback" denotes both the mechanism
   described in this specification and the complete set of RateLimit
   fields together with the "ohai-target" parameter.

   To know whether the RateLimit fields provides Oblivious Proxy
   Feedback (see Section 3.1), an Oblivious proxy MUST:

   1.  identify the quota policy associated to the expiring limit;

   2.  check whether the "ohai-target" parameter is present and its
       syntax is correct.

   In the example below, the expiring limit value is "100", so the
   associated quota policy the second one.  This quota policy includes
   the "ohai-target" parameter: this indicates that the RateLimit fields
   are intended for an Oblivious proxy.

   RateLimit-Limit: 100, 10;w=1, 100;w=60;ohai-target=1
   RateLimit-Remaining: 8
   RateLimit-Reset: 15

              Figure 1: An Example of Oblivious Proxy Feedback

3.  The ohai-target Quota Policy Parameter

   The following quota policy parameter is defined (see [RATELIMIT]).

   ohai-target:  The OPTIONAL "ohai-target" parameter indicates that the
      associated quota policy provides Oblivious Proxy Feedback.  Its
      syntax is defined in Section 3.

   Its type MUST be Integer (see Section 3.3.1 of [STRUCTURED-FIELDS]
   with the following allowed values:

   1:  this value indicates that RateLimit fields are applicable to all
      the clients that are serviced by the Oblivious proxy.

   2:  this value indicates that RateLimit fields are applicable only to
      the client that issued the request.  For example, this value could
      be used if the server thinks the client behavior is malicious (see
      Section 5.2).

   This parameter MUST NOT appear more than once in a quota policy.

   If the parameter or its value are malformed it MUST be ignored, and
   proxies MUST NOT attempt to fix neither the parameter nor the value.
   In this case the RateLimit fields MUST not be considered as providing
   Proxy Feedback.

3.1.  Processing ohai-target

   An Oblivious proxy receiving RateLimit fields providing Oblivious
   Proxy Feedback, (see Section 2):

   1.  MUST remove the RateLimit fields from the Oblivious response,
       since they are not intended to be forwarded to the Oblivious
       client;

   2.  MAY replace the RateLimit fields with a new set of RateLimit
       fields that are intended to be forwarded to the Oblivious client.

   An Oblivious request resource receiving RateLimit fields providing
   Oblivious Proxy Feedback MUST:

   1.  remove the RateLimit fields from the Oblivious target resource
       response, since they are not intended to be forwarded to the
       Oblivious client;

   2.  encapsulate the resulting response in the content of the
       Encapsulated response;

   3.  add the above RateLimit fields to the Encapsulated response, so
       that the Oblivious proxy can access them.

   The above behavior is consistent with the Intermediaries section of
   [RATELIMIT] since the Oblivious proxy and request resource can be
   considered part of the originating service infrastructure.

   If an Oblivious Proxy Feedback is generated by the Oblivious request
   resource before removing the protection (including being unable to
   remove encapsulation for any reason, see Section 6.2 of [OHTTP]), it
   will result in the RateLimit fields added in the status code being
   sent without protection in response to a POST request from a client.

   While this specification does not mandate specific traffic shaping
   actions for Oblivious proxies in addition to the ones indicated in
   [RATELIMIT], an Oblivious proxy failing to reshape traffic from a
   specific client or from all the clients according to the received
   Oblivious Proxy Feedback can experience different levels of service
   denial by Oblivious request and target resources.

   An example mitigation could be to throttle out clients with an high
   ration of requests considered malicious (see Section 4).

4.  The attack-severity Quota Policy Parameter

   The following quota policy parameter is defined (see [RATELIMIT]).

   attack-severity:  The OPTIONAL "attack-severity" parameter is used by
      Oblivious resource to convey the likeliness that an Oblivious
      request is malicious.

   Its value is an Integer (see Section 3.3.1 of [STRUCTURED-FIELDS]
   which takes one of the values defined in Section 3.12.2 of [RFC7970].

   This parameter MUST NOT appear more than once in a quota policy.

   If the parameter or its value are malformed it MUST be ignored, and
   proxies MUST NOT attempt to fix neither the parameter nor the value.

5.  Security Considerations

   Security considerations for the Oblivious HTTP protocol (see
   Section 8 of [OHTTP]) as well as the ones for RateLimit-Limit fields
   (see Section 6 of [RATELIMIT]) apply.

5.1.  Client-Proxy collusion

   While [OHTTP] is based on the Oblivious proxy not leaking the client
   identity to the Oblivious resources, it might be the case that the
   Oblivious proxy colludes with clients in attacking the Oblivious
   resources.

   RateLimit fields might disclose operational capacity information
   useful to design denial of service attacks or to circumvent defensive
   measures put in place by the Oblivious resources (see Section 6.2 of
   [RATELIMIT]).

   The Oblivious target and request resources SHOULD convey Oblivious
   Proxy Feedback only to trusted Oblivious proxies.

5.2.  Attack categories

   Attacks against Oblivious Resources can be classified into three
   categories:

   1.  A client deliberately sends a malformed encapsulated request to
       consume computational resources of the Oblivious architecture
       e.g. via the decryption process, or triggering the generation of
       error responses;

   2.  A client deliberately sends a request that triggers an error on
       the Oblivious target resource.  This might be a malformed HTTP
       request, or request for a missing resource.

   3.  A botnet performing an application layer denial of service attack
       (e.g.  HTTP flood) against an Oblivious resource.  Because each
       bot makes seemingly legitimate network requests, the traffic
       between the Oblivious proxy and the clients appears normal,
       nonetheless as a whole it not only can saturate the Oblivious
       resources, but also makes appear the Oblivious proxy as an
       attacker.

5.3.  Information disclosure

   Since the Oblivious Proxy Feedback is intended to be used only by the
   Oblivious Proxy, if either an Oblivious resource does not strip off
   the Oblivious Proxy Feedback from the encrpyted content, or an
   Oblivious proxy does not strip off the Oblivious Proxy Feedback
   before forwarding the response to the client, there might be
   information disclosure.

   This can happen due to faulty implemented oblivious servers or to the
   presence of further intermediaries along the chain.

6.  IANA Considerations

6.1.  RateLimit Parameter Value Registrations

   This specification requests IANA to add the following parameters to
   the "Hypertext Transfer Protocol (HTTP) RateLimit Parameters"
   registry defined in [RATELIMIT].

    +=================+=================+=============+===============+
    | Field Name      | Parameter Name  | Description | Specification |
    +=================+=================+=============+===============+
    | RateLimit-Limit | ohai-target     | ohttp       | Section 3 of  |
    |                 |                 | ratelimit   | this document |
    +-----------------+-----------------+-------------+---------------+
    | RateLimit-Limit | attack-severity | ohttp       | Section 4 of  |
    |                 |                 | ratelimit   | this document |
    +-----------------+-----------------+-------------+---------------+

                                  Table 1

7.  Normative References

   [HTTP]     Fielding, R. T., Nottingham, M., and J. Reschke, "HTTP
              Semantics", Work in Progress, Internet-Draft, draft-ietf-
              httpbis-semantics-19, 12 September 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
              semantics-19>.

   [OHTTP]    Thomson, M. and C. A. Wood, "Oblivious HTTP", Work in
              Progress, Internet-Draft, draft-ietf-ohai-ohttp-01, 15
              February 2022, <https://datatracker.ietf.org/doc/html/
              draft-ietf-ohai-ohttp-01>.

   [RATELIMIT]
              Polli, R. and A. M. Ruiz, "RateLimit Fields for HTTP",
              Work in Progress, Internet-Draft, draft-ietf-httpapi-
              ratelimit-headers-03, 7 March 2022,
              <https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-
              ratelimit-headers-03>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC7970]  Danyliw, R., "The Incident Object Description Exchange
              Format Version 2", RFC 7970, DOI 10.17487/RFC7970,
              November 2016, <https://www.rfc-editor.org/rfc/rfc7970>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8941]  Nottingham, M. and P-H. Kamp, "Structured Field Values for
              HTTP", RFC 8941, DOI 10.17487/RFC8941, February 2021,
              <https://www.rfc-editor.org/rfc/rfc8941>.

   [STRUCTURED-FIELDS]
              Nottingham, M. and P-H. Kamp, "Structured Field Values for
              HTTP", RFC 8941, DOI 10.17487/RFC8941, February 2021,
              <https://www.rfc-editor.org/rfc/rfc8941>.

Appendix A.  Examples

A.1.  Use of ohai-target and attack-severity

   The following example illustrates the use of ohai-target and attack-
   severity quota policy parameters.

   An Oblivious target resource receives a malformed oblivious request
   coming from an Oblivious request resource request and identifies the
   sender using its source IP address.

   It thus generates an error response including Oblivious Proxy
   Feedback information with the "ohai-target" quota policy parameter.

   The Oblivious request resource then:

   1.  copies the RateLimit fields from the original response;

   2.  removes them from the original response before encapsulating it;

   3.  generates a single 200 encapsulated response for the oblivious
       proxy resource along with the copied RateLimit fields.

   +----+              +----------+               +----------+          +-----------+
   | C  |              | Proxy    |               | Request  |          | Target    |
   |    |              | Resource |               | Resource |          | Resource  |
   +-+--+              +----+-----+               +-----+----+          +------+----+
     |                      |                           |                      |
     | Encapsulated         |                           |                      |
     +--------------------->|                           |                      |
     |  Request             |                           |                      |
     |                      | Encapsulated              |                      |
     |                      +-------------------------->|                      |
     |                      |  Request                  |                      |
     |                      |                           | Request              | .---------.
     |                      |                           +--------------------->| | Identify|
     |                      |                           |                      +-+malformed|
     |                      |                           |                      | | request |
     |                      |                           |         400 response | '---------'
     |                      |                           |<---------------------+
     |                      |                           |                      |
     |                      | 200 response with         |                      |
     |                      | RateLimit-Limit           |                      |
     |                      | field and the             |                      |
     |                      | ohai-target parameter     |                      |
                            |<--------------------------+                      |
   .---------------------.  |   Encapsulated 400        |                      |
   | Process             |  |       response            |                      |
   | ohai-target     +--+                               |                      |
   | and applies         |  |                           |                      |
   | rate-limit for the  |  |                           |                      |
   | offending client    |  |                           |                      |
   '---------------------'  |                           |                      |
                            |                           |                      |
     |                      |                           |                      |
     | Encapsulated 400     |                           |                      |
     |<---------------------+                           |                      |
     |     response         |                           |                      |
     |                      |                           |                      |

            Figure 2: An Example of Ratelimit Feedback to Proxy

   The response constructed by the Oblivious request resource is
   depicted below, and includes an unregistered, informative "comment"
   quota policy parameter providing a rationale for the "attack-
   severity".

   =============== NOTE: '\' line wrapping per RFC 8792 ================

   HTTP/1.1 200 OK
   Date: Wed, 27 March 2022 04:45:07 GMT
   Cache-Control: private, no-store
   Content-Type: message/ohttp-res
   Content-Length: 38 <content is the encapsulated 400 response>
   RateLimit-Limit: 10,10;w=60;ohai-target=2;attack-severity=1;\
                    comment="abnormal header matching a WAF rule"
   RateLimit-Remaining: 4
   RateLimit-Reset: 35

   ...encrypted content...

Appendix B.  Acknowledgements

   Thanks to Lucas Pardue, Rich Salz, and Brandon Williams for the
   discussion and comments.

Authors' Addresses

   Tirumaleswar Reddy
   Akamai
   Embassy Golf Link Business Park
   Bangalore 560071
   Karnataka
   India

   Email: kondtir@gmail.com


   Dan Wing
   Citrix Systems, Inc
   4988 Great America Pkwy
   Santa Clara, CA 95054
   United States of America

   Email: danwing@gmail.com


   Mohamed Boucadair
   Orange
   35000 Rennes
   France

   Email: mohamed.boucadair@orange.com
